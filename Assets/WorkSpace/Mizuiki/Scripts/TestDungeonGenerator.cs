using System.Collections;
using System.Collections.Generic;
using System.IO;
using Unity.VisualScripting;
using UnityEngine;

public class TestDungeonGenerator : MonoBehaviour
{
	[Header("生成するダンジョンのデータ")]
	[SerializeField] private Object m_dungeonData = null;

	[Header("ダンジョンのサイズ")]
	[SerializeField] private Vector2Int m_dungeonSize;

	[System.Serializable]
	struct MapBlock
	{
		public string mapName;
		public BlockData.BlockType blockType;
	}

	[Header("生成ブロック")]
	[SerializeField] private MapBlock[] m_setBlocks;
	private readonly Dictionary<string, BlockData.BlockType> m_blocks = new();

	[Header("ブロックジェネレータ")]
	[SerializeField] private BlockGenerator m_blockGenerator;

	[Header("生成方式のインデックス")]
	[SerializeField] private int m_dungeonIndex = 0;
	[Header("生成スクリプトの配列")]
	[SerializeField] private DungeonGeneratorBase[] m_dungeonGenerators;

	[Header("コアの座標")]
	[SerializeField] private Vector2Int m_corePosition = Vector2Int.zero;

	[System.Serializable]
	public struct BlockGenerateData
	{
		[Header("ブロックの生成範囲(コアからの距離)")]
		public MyFunction.MinMax range;
		[Header("ブロックの生成率")]
		[Range(0.0f, 1.0f)] public float rateMin;
		[Range(0.0f, 1.0f)] public float rateMax;
		[Header("ノイズのスケール"), Min(0.0f)]
		public float noiseScale;
	}

	[SerializeField] private BlockGenerateData[] m_generateBlocks;

	[Header("ノイズのスケール"), Range(0.0f, 1.0f)]
	[SerializeField] private float m_noiseScale = 1.0f;
	[Header("鉱石の生成率")]
	[SerializeField] private float m_oreGenerateRate = 0.3f;
	[Header("鉱石の生成範囲")]
	[SerializeField] private MyFunction.MinMax m_oreGenerateRange = new();
	[Header("鉱石の生成率の範囲")]
	[SerializeField] private Vector2 m_oreGenerateRateRange = new();

	[Header("ライト付ける")]
	[SerializeField] private bool m_light = true;

	[Header("プレイヤー(トランスフォーム用)")]
	[SerializeField] private GameObject m_player = null;

	private List<List<BlockData.BlockType>> m_blockTypes = new();


	// Start is called before the first frame update
	void Start()
	{
		// ブロックの設定
		for (int i = 0; i < m_setBlocks.Length; i++)
		{
			MapBlock mapBlock = m_setBlocks[i];

			// 上書き防止
			if (m_blocks.ContainsKey(mapBlock.mapName))
				continue;

			// ブロックの種類設定
			m_blocks[mapBlock.mapName] = mapBlock.blockType;
		}

		// プレイヤーが設定されていれば生成
		if (m_player != null)
		{
			//Instantiate(m_player);
			m_blockGenerator.SetPlayerTransform(m_player.transform);
		}

		List<List<string>> mapList;

		// 生成
		if (m_dungeonGenerators.Length > 0)
		{
			mapList = m_dungeonGenerators[m_dungeonIndex].GenerateDungeon(m_dungeonSize);
		}
		else
		{
			// SCV読み込み
			mapList = GenerateSCV();
		}

		// マップの生成
		SetBlockType(mapList);
		Generate(m_blockTypes);

	}

	// ブロックの種類設定
	private void SetBlockType(List<List<string>> mapList)
	{
		List<List<BlockData.BlockType>> types = new();

		for (int y = 0; y < mapList.Count; y++)
		{
			List<BlockData.BlockType> type = new();

			for (int x = 0; x < mapList[y].Count; x++)
			{
				string name = mapList[y][x];

				// ブロックナシ
				if (name == "0")
				{
					type.Add(BlockData.BlockType.OVER);
				}
				// ブロックアリ
				else if (name == "1")
				{
					float dis = Vector2.Distance(m_corePosition, new Vector2(x, y));

					// 生成範囲内
					if (m_oreGenerateRange.Within(dis))
					{
						// ノイズの取得
						float noise = Mathf.PerlinNoise(x * m_noiseScale, y * m_noiseScale);
						// 生成範囲の中央値
						float center = (m_oreGenerateRange.min + m_oreGenerateRange.max) / 2.0f;
						// 生成範囲の中央からの距離
						float centerDis = Mathf.Abs(center - dis);
						// 生成の幅
						float wid = m_oreGenerateRange.max - m_oreGenerateRange.min;
						// ラープの値
						float t = 1.0f - (centerDis / (wid / 2.0f));
						// 生成率の取得
						float rate = Mathf.Lerp(m_oreGenerateRateRange.x, m_oreGenerateRateRange.y, t);

						// 鉱石
						if (noise < rate)
						{
							type.Add(CreateOre());
						}
						// 石
						else
						{
							type.Add(CreateBlock());
						}
					}
					// 生成範囲外
					else
					{
						type.Add(CreateBlock());
					}
				}
				// 確定鉱石
				else if (name == "2")
				{
					type.Add(CreateOre());
				}
				// 念のためその他
				else
				{
					type.Add(BlockData.BlockType.OVER);
				}
			}
			// 追加
			types.Add(type);
		}

		m_blockTypes = types;
	}

	// ダンジョンの生成
	private void Generate(List<List<BlockData.BlockType>> mapList)
	{
		// 読みだしたデータをもとにダンジョン生成をする
		for (int y = 0; y < mapList.Count; y++)
		{
			for (int x = 0; x < mapList[y].Count; x++)
			{
				BlockData.BlockType name = mapList[y][x];

				// 生成座標
				Vector3 pos = new(x, y, 0.0f);

				//// キーが存在しない場合は地面だけ
				//if (!m_blocks.ContainsKey(name))
				//{
				//	m_blockGenerator.GenerateBlock(BlockData.BlockType.OVER, pos, null, m_light);
				//	continue;
				//}

				// ブロックの生成
				m_blockGenerator.GenerateBlock(name, pos, null, m_light);

			}
		}

	}

	// CSV読み込みの生成
	private List<List<string>> GenerateSCV()
	{
		// ファイルがなければマップ読み込みの処理をしない
		if (!m_dungeonData)
			return new();

		// マップのリスト
		List<List<string>> mapList = new ();

		// 改行区切りで読み出す
		foreach (string line in m_dungeonData.ToString().Split("\n"))
		{
			// 行が存在しなければループを抜ける
			if (line == "")
				break;

			string lin = line.Remove(line.Length - 1);

			List<string> list = new ();

			// カンマ区切りで読み出す
			foreach (string line2 in lin.Split(","))
			{
				list.Add(line2);
			}

			mapList.Add(list);
		}

		return mapList;
	}

	// ブロック
	private BlockData.BlockType CreateBlock()
	{
		return BlockData.BlockType.STONE;
	}

	// 鉱石
	private BlockData.BlockType CreateOre()
	{
		int rand = Random.Range((int)BlockData.BlockType.ORE_BEGIN + 1, (int)BlockData.BlockType.ORE_END);

		return BlockData.BlockType.COAL;
		//return (BlockData.BlockType)rand;
	}

}
